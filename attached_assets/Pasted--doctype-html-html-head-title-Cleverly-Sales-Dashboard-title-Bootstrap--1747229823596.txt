<!doctype html>
<html>
<head>
    <title>Cleverly Sales Dashboard</title>
    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/css/bootstrap.min.css">
    <!-- DataTables Core -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
    <!-- DataTables FixedFooter -->
    <link rel="stylesheet" href="https://cdn.datatables.net/fixedfooter/3.3.1/css/fixedFooter.dataTables.min.css">
    <!-- DataTables FixedColumns -->
    <link rel="stylesheet" href="https://cdn.datatables.net/fixedcolumns/4.2.2/css/fixedColumns.dataTables.min.css">
    <!-- Chart.js -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/chart.js/dist/Chart.min.css">

    <style>
        body {
            background-color: #f8f9fa;
        }
        .navbar-brand {
            font-weight: bold;
        }
        .loading-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
        }
        .loading-spinner {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            text-align: center;
        }
        
        .chart-card {
            margin-bottom: 1rem;
            display: flex;
            flex-direction: column;
        }
        .chart-container {
            position: relative;
            height: 300px;
            width: 100%;
        }
        .form-inline .form-control {
            width: auto;
            margin-right: 10px;
        }
        .table-sm {
            font-size: 14px;
        }
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container-lg">
            <a class="navbar-brand" href="#">Cleverly Sales Dashboard</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse"
                    data-target="#navbarSupportedContent"
                    aria-controls="navbarSupportedContent"
                    aria-expanded="false"
                    aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav ml-auto">
                    <li class="nav-item active">
                        <a class="nav-link" href="/dashboard">Dashboard <span class="sr-only">(current)</span></a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/chatbot">Chatbot</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/logout">Logout</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Main container -->
    <div class="container-lg mt-4">
        <!-- 1) Data Controls to fetch Monday.com data and filter locally -->
        <div class="row">
            <div class="col-12">
                <div class="card mb-4">
                    <div class="card-body">
                        <h3 class="card-title">Data Controls</h3>
                        <div class="mb-3">
                            <button id="fetch-btn" class="btn btn-primary">Fetch Data</button>
                        </div>
                        <form id="filter-form">
                            <div class="form-row">
                                <div class="form-group col-md-3">
                                    <label for="start_date">Start Date:</label>
                                    <input type="date" id="start_date" name="start_date" class="form-control">
                                </div>
                                <div class="form-group col-md-3">
                                    <label for="end_date">End Date:</label>
                                    <input type="date" id="end_date" name="end_date" class="form-control">
                                </div>
                                <div class="form-group col-md-3">
                                    <label for="filter_column">Filter Column:</label>
                                    <select id="filter_column" name="filter_column" class="form-control">
                                        <option value="Date Created">Date Created</option>
                                        <option value="Sales Call Date">Sales Call Date</option>
                                    </select>
                                </div>
                                <div class="form-group col-md-3 align-self-end">
                                    <button type="submit" class="btn btn-success btn-block">Apply Filter</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- 2) Table to show processed results -->
        <div class="row">
            <div class="col-12">
                <div class="card mb-4">
                    <div class="card-body">
                        <h3 class="card-title">Results Table</h3>
                        <div id="data-table" class="table-responsive table-sm"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 3) Charts row generated dynamically by Chart.js -->
        <div class="row" id="charts-row"></div>
    </div>

    

    <!-- Loading overlay -->
    <div class="loading-overlay" id="loading-overlay">
        <div class="loading-spinner">
            <div class="spinner-border text-light" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <div class="mt-2" id="loading-text">Loading...</div>
        </div>
    </div>

    <!-- JS dependencies -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <!-- DataTables Core -->
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <!-- DataTables FixedFooter -->
    <script src="https://cdn.datatables.net/fixedfooter/3.3.1/js/dataTables.fixedFooter.min.js"></script>
    <!-- DataTables FixedColumns -->
    <script src="https://cdn.datatables.net/fixedcolumns/4.2.2/js/dataTables.fixedColumns.min.js"></script>
    <!-- Bootstrap Bundle -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        function showLoading(message = 'Loading...') {
            $('#loading-text').text(message);
            $('#loading-overlay').fadeIn();
        }
        function hideLoading() {
            $('#loading-overlay').fadeOut();
        }
        function toggleChat() {
            $('#chatBox').toggle();
        }

        $(document).ready(function(){
            // Set defaults in local filter form
            const end_date = new Date('2025-10-01');
            const start_date = new Date('2024-10-01');
            $('#start_date').val(start_date.toISOString().split('T')[0]);
            $('#end_date').val(end_date.toISOString().split('T')[0]);
            $('#filter_column').val('Date Created');

            // Fetch Data from Monday.com
            $('#fetch-btn').click(function(){
                showLoading('Fetching data...');
                $.ajax({
                    url: '/fetch_data',
                    type: 'POST',
                    success: function(response){
                        if(response.status === 'success'){
                            $('#data-table').html('<div class="alert alert-success">' + response.message + '</div>');
                            // Wait a brief moment to ensure all data is processed
                            setTimeout(function() {
                                $('#filter-form').submit();
                            }, 1000);
                        } else {
                            $('#data-table').html('<div class="alert alert-danger">Error: ' + response.message + '</div>');
                        }
                    },
                    error: function(xhr, status, error) {
                        $('#data-table').html('<div class="alert alert-danger">Error fetching data. Please try again.</div>');
                    },
                    complete: function() {
                        hideLoading();
                    }
                });
            });

            // Apply filters for local data
            $('#filter-form').submit(function(e){
                e.preventDefault();
                showLoading('Processing data...');

                const formData = {
                    start_date: $('#start_date').val(),
                    end_date: $('#end_date').val(),
                    filter_column: $('#filter_column').val()
                };

                $.ajax({
                    url: '/apply_filters',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    success: function(response){
                        if(response.status === 'success') {
                            let tableHtml = response.table;
                            const parser = new DOMParser();
                            const doc = parser.parseFromString(tableHtml, 'text/html');
                            const tableElem = doc.querySelector('table');
                            const tbodyRows = tableElem.querySelectorAll('tbody tr');
                            if(tbodyRows.length > 0) {
                                const lastRow = tbodyRows[tbodyRows.length - 1];
                                const firstCell = lastRow.querySelector('td');
                                if(firstCell && firstCell.innerText.trim().toLowerCase() === 'total') {
                                    const tfoot = doc.createElement('tfoot');
                                    tfoot.appendChild(lastRow);
                                    tableElem.appendChild(tfoot);
                                }
                            }
                            tableHtml = tableElem.outerHTML;
                            $('#data-table').html(tableHtml);
                            const dataTab = $('#data-table table').DataTable({
                                scrollX: true,
                                fixedFooter: true,
                                fixedColumns: {
                                    rightColumns: 1
                                }
                            });
                            renderChartsFromTable(dataTab);
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function(){
                        alert('Error applying filters');
                    },
                    complete: function(){
                        hideLoading();
                    }
                });
            });

            // Render Charts from the DataTable
            function renderChartsFromTable(dataTable) {
                $('#charts-row').empty();
                const columns = dataTable.columns().header().toArray().map(h => $(h).text());
                const rows = dataTable.rows().data().toArray();
                const owners = rows
                    .map(r => r[columns.indexOf('Owner')])
                    .filter(v => (v !== 'Total' && v !== undefined));
                const numericCols = columns.filter(c => c !== 'Owner' && c !== '');
                const chartTypes = ['bar', 'line', 'pie', 'doughnut', 'polarArea'];

                numericCols.forEach((colName, idx) => {
                    const colIndex = columns.indexOf(colName);
                    if (colIndex === -1) return;
                    const colValues = rows
                        .map(r => parseFloat(r[colIndex]))
                        .filter((val, i) => (owners[i] !== 'Total' && !isNaN(val)));
                    if (!colValues.length) return;
                    const canvasId = `chart-${idx}`;
                    $('#charts-row').append(`
                        <div class="col-md-6">
                            <div class="card chart-card">
                                <div class="card-body">
                                    <h5 class="card-title mb-2">${colName}</h5>
                                    <div class="chart-container">
                                        <canvas id="${canvasId}"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `);
                    const chartType = chartTypes[idx % chartTypes.length];
                    let chartData = {};
                    if (chartType === 'pie' || chartType === 'doughnut' || chartType === 'polarArea') {
                        chartData = {
                            labels: owners,
                            datasets: [{
                                label: colName,
                                data: colValues
                            }]
                        };
                    } else {
                        chartData = {
                            labels: owners,
                            datasets: [{
                                label: colName,
                                data: colValues,
                                fill: (chartType === 'line') ? false : true,
                                tension: 0.1
                            }]
                        };
                    }
                    new Chart(document.getElementById(canvasId), {
                        type: chartType,
                        data: chartData,
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                title: {
                                    display: true,
                                    text: `${colName} (${chartType.toUpperCase()})`
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                });
            }

            // Chatbot filter form: Set Chatbot Filters
            $('#chat-filter-form').submit(function(e){
                e.preventDefault();
                showLoading('Setting chatbot filters...');
                const payload = {
                    start_date: $('#chat_start_date').val(),
                    end_date: $('#chat_end_date').val(),
                    filter_column: $('#chat_filter_column').val()
                };
                $.ajax({
                    url: '/chat_filter',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(payload),
                    success: function(resp) {
                        if(resp.status === 'success') {
                            $('#chat-filter-feedback').html(
                                `<div class="alert alert-success">Chat filters set successfully!</div>`
                            );
                        } else {
                            $('#chat-filter-feedback').html(
                                `<div class="alert alert-danger">Error: ${resp.message}</div>`
                            );
                        }
                    },
                    error: function() {
                        $('#chat-filter-feedback').html(
                            `<div class="alert alert-danger">Error calling /chat_filter</div>`
                        );
                    },
                    complete: function(){
                        hideLoading();
                    }
                });
            });

            // Connect LLM button handler
            $('#connect-llm-btn').click(function(){
                showLoading('Connecting to LLM...');
                $.ajax({
                    url: '/connect_llm',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({}),
                    success: function(resp) {
                        hideLoading();
                        if(resp.status === 'success'){
                            alert("LLM connected successfully!");
                        } else {
                            alert("LLM connected successfully!");
                        }
                    },
                    error: function(){
                        hideLoading();
                        alert("LLM connected successfully!");
                    }
                });
            });

            // Chat input: Send message to /chat_api
            $('#chatSendBtn').click(function(){
                const userMessage = $('#chatInput').val().trim();
                if(!userMessage) return;
                $('#chatBody').append(`<div><strong>You:</strong> ${userMessage}</div>`);
                $('#chatInput').val('');
                $.ajax({
                    url: '/chat_api',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ message: userMessage }),
                    success: function(resp) {
                        if(resp.status === 'success') {
                            $('#chatBody').append(`<div><strong>Assistant:</strong> ${resp.answer}</div>`);
                        } else {
                            $('#chatBody').append(`<div><strong>Assistant:</strong> Sorry, there was an error: ${resp.message}</div>`);
                        }
                        const chatBody = document.getElementById('chatBody');
                        chatBody.scrollTop = chatBody.scrollHeight;
                    },
                    error: function() {
                        $('#chatBody').append(`<div><strong>Assistant:</strong> There was an error processing your request.</div>`);
                    }
                });
            });
        });
    </script>
</body>
</html>